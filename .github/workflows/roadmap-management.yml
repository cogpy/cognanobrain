name: Roadmap Management & Issue Creation

on:
  schedule:
    # Run weekly on Mondays at 10:00 AM UTC for roadmap review
    - cron: '0 10 * * 1'
  workflow_dispatch:
    inputs:
      action:
        description: 'Roadmap action to perform'
        required: true
        type: choice
        options:
        - 'create-chapter-issues'
        - 'update-progress'
        - 'generate-milestones'
        - 'full-sync'
      chapter_focus:
        description: 'Chapter to focus on (1-10, or "all")'
        required: false
        default: 'all'

jobs:
  roadmap-sync:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Parse roadmap and create structured data
      id: parse-roadmap
      run: |
        echo "Parsing NanoBrain roadmap structure..."
        
        # Extract chapter information from TODO.md
        python3 << 'EOF'
        import re
        import json
        
        chapters = {}
        current_chapter = None
        current_section = None
        
        with open('TODO.md', 'r') as f:
            content = f.read()
        
        # Parse chapters and sections
        lines = content.split('\n')
        for line in lines:
            # Match chapter headers
            chapter_match = re.match(r'^## Chapter (\d+): (.+)$', line)
            if chapter_match:
                chapter_num = int(chapter_match.group(1))
                chapter_title = chapter_match.group(2)
                current_chapter = chapter_num
                chapters[current_chapter] = {
                    'title': chapter_title,
                    'sections': []
                }
                continue
            
            # Match section items
            section_match = re.match(r'^(\d+\.\d+\.?\d*)\s+(.+)$', line)
            if section_match and current_chapter:
                section_num = section_match.group(1)
                section_title = section_match.group(2)
                chapters[current_chapter]['sections'].append({
                    'number': section_num,
                    'title': section_title,
                    'implemented': False  # Default to not implemented
                })
        
        # Save structured data
        with open('roadmap_data.json', 'w') as f:
            json.dump(chapters, f, indent=2)
        
        print(f"Parsed {len(chapters)} chapters with total sections:")
        for ch_num, ch_data in chapters.items():
            print(f"  Chapter {ch_num}: {len(ch_data['sections'])} sections")
        EOF
        
        echo "roadmap_parsed=true" >> $GITHUB_OUTPUT

    - name: Create chapter issues
      if: github.event.inputs.action == 'create-chapter-issues' || github.event.inputs.action == 'full-sync'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const roadmapData = JSON.parse(fs.readFileSync('roadmap_data.json', 'utf8'));
          
          const chapterFocus = '${{ github.event.inputs.chapter_focus }}' || 'all';
          
          for (const [chapterNum, chapterData] of Object.entries(roadmapData)) {
            if (chapterFocus !== 'all' && chapterNum !== chapterFocus) {
              continue;
            }
            
            const issueTitle = `Chapter ${chapterNum}: ${chapterData.title}`;
            const issueBody = `
          ## NanoBrain Chapter ${chapterNum} Implementation
          
          **${chapterData.title}**
          
          ### Sections to Implement:
          
          ${chapterData.sections.map(section => 
            `- [ ] ${section.number} ${section.title}`
          ).join('\n')}
          
          ### Implementation Strategy:
          - Incremental development following theoretical framework
          - Progressive consciousness modeling enhancements
          - Integration with existing NanoBrain architecture
          
          ### Acceptance Criteria:
          - [ ] All sections implemented according to specifications
          - [ ] Code quality and testing standards met
          - [ ] Documentation updated
          - [ ] Integration with consciousness platform verified
          
          ### Related Concepts:
          ${chapterNum == 1 ? '- Philosophical transformation\n- Consciousness reverse engineering\n- Worldview paradigm shifts' : ''}
          ${chapterNum == 2 ? '- Fractal Information Theory (FIT)\n- Geometric Musical Language (GML)\n- Time crystal structures' : ''}
          ${chapterNum == 3 ? '- Phase Prime Metrics (PPM)\n- Universal symmetry patterns\n- Prime number intelligence' : ''}
          ${chapterNum >= 4 ? '- Advanced consciousness modeling\n- Quantum-classical interfaces\n- Hyperdimensional processing' : ''}
          
          *This issue is part of the systematic NanoBrain Journey implementation.*
          `;
            
            try {
              const existingIssues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'all',
                labels: `chapter-${chapterNum}`
              });
              
              if (existingIssues.data.length === 0) {
                await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueTitle,
                  body: issueBody,
                  labels: [
                    'nanobrain-journey',
                    `chapter-${chapterNum}`,
                    'roadmap',
                    'enhancement'
                  ]
                });
                console.log(`Created issue for Chapter ${chapterNum}`);
              } else {
                console.log(`Issue for Chapter ${chapterNum} already exists`);
              }
            } catch (error) {
              console.log(`Error creating issue for Chapter ${chapterNum}:`, error.message);
            }
          }

    - name: Generate milestones
      if: github.event.inputs.action == 'generate-milestones' || github.event.inputs.action == 'full-sync'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const roadmapData = JSON.parse(fs.readFileSync('roadmap_data.json', 'utf8'));
          
          const milestoneDescriptions = {
            1: "Foundation of consciousness exploration - philosophical transformation and worldview shifts",
            2: "Fractal tape replacement - implementing FIT and GML theoretical frameworks",
            3: "Phase prime metrics - universal symmetry pattern recognition systems",
            4: "Fractal mechanics - geometric algebra and dodecanion brain modeling",
            5: "Universal time crystals - big data processing in garden of gardens architecture",
            6: "Singularity harvesting - unprecedented natural technology implementations",
            7: "Complete brain modeling - integrated time crystal consciousness representation",
            8: "Magnetic light computing - Hinductor-based synthesis and crystal creation",
            9: "Programmable matter - brain jelly to humanoid avatar transformation systems",
            10: "Consciousness uploading - evolution toward truly conscious machine systems"
          };
          
          for (const [chapterNum, chapterData] of Object.entries(roadmapData)) {
            const milestoneTitle = `Chapter ${chapterNum}: ${chapterData.title}`;
            const description = milestoneDescriptions[chapterNum] || `Chapter ${chapterNum} implementation milestone`;
            
            try {
              const existingMilestones = await github.rest.issues.listMilestones({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'all'
              });
              
              const exists = existingMilestones.data.some(m => m.title === milestoneTitle);
              
              if (!exists) {
                const dueDate = new Date();
                dueDate.setDate(dueDate.getDate() + (parseInt(chapterNum) * 14)); // 2 weeks per chapter
                
                await github.rest.issues.createMilestone({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: milestoneTitle,
                  description: description,
                  due_on: dueDate.toISOString()
                });
                console.log(`Created milestone for Chapter ${chapterNum}`);
              }
            } catch (error) {
              console.log(`Error creating milestone for Chapter ${chapterNum}:`, error.message);
            }
          }

    - name: Update progress tracking
      if: github.event.inputs.action == 'update-progress' || github.event.inputs.action == 'full-sync'
      run: |
        echo "Updating NanoBrain implementation progress..."
        
        # Create progress summary
        cat > PROGRESS.md << 'EOF'
        # NanoBrain Journey Progress
        
        ## Implementation Status
        
        *Last updated: $(date)*
        
        ### Chapter Overview
        
        | Chapter | Title | Status | Features |
        |---------|-------|--------|----------|
        | 1 | Philosophical transformation | ðŸ”„ Planning | Consciousness models |
        | 2 | Fractal Information Theory | ðŸ“‹ Roadmap | FIT & GML systems |
        | 3 | Phase Prime Metrics | ðŸ“‹ Roadmap | PPM algorithms |
        | 4 | Fractal Mechanics | ðŸ“‹ Roadmap | Geometric algebra |
        | 5 | Universal Time Crystals | ðŸ“‹ Roadmap | Big data processing |
        | 6 | Singularity Harvesting | ðŸ“‹ Roadmap | Natural technologies |
        | 7 | Complete Brain Model | ðŸ“‹ Roadmap | Time crystal consciousness |
        | 8 | Magnetic Light Computing | ðŸ“‹ Roadmap | Hinductor systems |
        | 9 | Programmable Matter | ðŸ“‹ Roadmap | Brain jelly avatars |
        | 10 | Consciousness Uploading | ðŸ“‹ Roadmap | Conscious machines |
        
        ### Current Focus
        - Systematic implementation following 10-chapter roadmap
        - Automated feature development through GitHub Actions
        - Progressive consciousness modeling enhancements
        
        ### Next Steps
        - Chapter 1 philosophical framework implementation
        - Fractal information theory integration
        - Phase prime metric computational systems
        
        *This document is automatically updated by the NanoBrain Journey workflow.*
        EOF
        
        echo "Progress tracking updated successfully"

    - name: Commit progress updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "NanoBrain Roadmap Bot"
        
        if [ -f "PROGRESS.md" ]; then
          git add PROGRESS.md
        fi
        
        if [ -f "roadmap_data.json" ]; then
          git add roadmap_data.json
        fi
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "ðŸ“‹ Update NanoBrain roadmap progress and tracking data

          - Automated roadmap synchronization
          - Progress tracking updates
          - Chapter milestone management
          
          Part of the systematic NanoBrain Journey implementation"
          
          git push origin main
        fi